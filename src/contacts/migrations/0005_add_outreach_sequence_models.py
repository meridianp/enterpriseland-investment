# Generated by Django 4.2.7 on 2025-06-27 14:24

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0002_initial'),
        ('contacts', '0004_add_email_template_slug'),
    ]

    operations = [
        migrations.CreateModel(
            name='OutreachSequence',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Internal name for the sequence', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', django_fsm.FSMField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20, protected=True)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual Entry'), ('lead_created', 'Lead Created'), ('lead_scored', 'Lead Score Changed'), ('tag_added', 'Tag Added'), ('form_submitted', 'Form Submitted'), ('custom_event', 'Custom Event')], default='manual', max_length=20)),
                ('trigger_conditions', models.JSONField(blank=True, default=dict, help_text='Conditions for automatic triggering')),
                ('skip_weekends', models.BooleanField(default=True, help_text='Skip sending emails on weekends')),
                ('timezone_optimized', models.BooleanField(default=True, help_text='Send emails at optimal time for recipient timezone')),
                ('optimal_send_hour', models.IntegerField(default=10, help_text='Hour of day to send emails (in recipient timezone)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)])),
                ('exit_on_reply', models.BooleanField(default=True, help_text='Stop sequence if recipient replies')),
                ('exit_on_click', models.BooleanField(default=False, help_text='Stop sequence if recipient clicks any link')),
                ('exit_on_conversion', models.BooleanField(default=True, help_text='Stop sequence if recipient converts')),
                ('exit_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Exit sequence if contact has any of these tags', size=None)),
                ('goal_description', models.TextField(blank=True, help_text='What is this sequence trying to achieve?')),
                ('conversion_url_pattern', models.CharField(blank=True, help_text='URL pattern to track conversions (regex supported)', max_length=500)),
                ('total_enrolled', models.PositiveIntegerField(default=0)),
                ('total_completed', models.PositiveIntegerField(default=0)),
                ('total_converted', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_sequences', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Outreach Sequence',
                'verbose_name_plural': 'Outreach Sequences',
                'db_table': 'outreach_sequences',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SequenceStep',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('step_type', models.CharField(choices=[('email', 'Send Email'), ('wait', 'Wait Period'), ('condition', 'Check Condition'), ('action', 'Perform Action'), ('ab_test', 'A/B Test')], default='email', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=200)),
                ('delay_days', models.PositiveIntegerField(default=0, help_text='Days to wait after previous step')),
                ('delay_hours', models.PositiveIntegerField(default=0, help_text='Additional hours to wait', validators=[django.core.validators.MaxValueValidator(23)])),
                ('day_type', models.CharField(choices=[('calendar', 'Calendar Days'), ('business', 'Business Days')], default='business', max_length=20)),
                ('email_subject', models.CharField(blank=True, help_text='Override template subject (supports variables)', max_length=500)),
                ('condition_type', models.CharField(blank=True, help_text='Type of condition to check', max_length=50)),
                ('condition_config', models.JSONField(blank=True, default=dict, help_text='Condition configuration')),
                ('action_type', models.CharField(blank=True, help_text='Type of action to perform', max_length=50)),
                ('action_config', models.JSONField(blank=True, default=dict, help_text='Action configuration')),
                ('is_variant', models.BooleanField(default=False)),
                ('variant_group', models.CharField(blank=True, help_text='Group identifier for A/B test variants', max_length=50)),
                ('variant_percentage', models.IntegerField(default=50, help_text='Percentage of recipients for this variant', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_sent', models.PositiveIntegerField(default=0)),
                ('total_opened', models.PositiveIntegerField(default=0)),
                ('total_clicked', models.PositiveIntegerField(default=0)),
                ('total_replied', models.PositiveIntegerField(default=0)),
                ('email_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sequence_steps', to='contacts.emailtemplate')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='contacts.outreachsequence')),
            ],
            options={
                'verbose_name': 'Sequence Step',
                'verbose_name_plural': 'Sequence Steps',
                'db_table': 'sequence_steps',
                'ordering': ['sequence', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SequenceEnrollment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', django_fsm.FSMField(choices=[('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('exited', 'Exited'), ('failed', 'Failed')], default='active', max_length=20, protected=True)),
                ('current_step_index', models.IntegerField(default=0)),
                ('next_step_at', models.DateTimeField(blank=True, help_text='When to execute next step', null=True)),
                ('exited_at', models.DateTimeField(blank=True, null=True)),
                ('exit_reason', models.CharField(blank=True, choices=[('completed', 'Sequence Completed'), ('replied', 'Contact Replied'), ('clicked', 'Contact Clicked'), ('converted', 'Contact Converted'), ('unsubscribed', 'Contact Unsubscribed'), ('manual', 'Manually Removed'), ('condition_met', 'Exit Condition Met'), ('error', 'Error Occurred')], max_length=20)),
                ('exit_details', models.TextField(blank=True)),
                ('converted', models.BooleanField(default=False)),
                ('converted_at', models.DateTimeField(blank=True, null=True)),
                ('conversion_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('enrollment_context', models.JSONField(blank=True, default=dict, help_text='Context data at time of enrollment')),
                ('custom_variables', models.JSONField(blank=True, default=dict, help_text='Custom variables for this enrollment')),
                ('variant_assignments', models.JSONField(blank=True, default=dict, help_text='A/B test variant assignments')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequence_enrollments', to='contacts.contact')),
                ('current_step', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_enrollments', to='contacts.sequencestep')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='contacts.outreachsequence')),
            ],
            options={
                'verbose_name': 'Sequence Enrollment',
                'verbose_name_plural': 'Sequence Enrollments',
                'db_table': 'sequence_enrollments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SequenceTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('cold_outreach', 'Cold Outreach'), ('lead_nurture', 'Lead Nurturing'), ('onboarding', 'Onboarding'), ('re_engagement', 'Re-engagement'), ('event_invite', 'Event Invitation'), ('follow_up', 'Follow-up'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('configuration', models.JSONField(help_text='Complete sequence configuration')),
                ('is_public', models.BooleanField(default=False, help_text='Available to all groups')),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('average_conversion_rate', models.FloatField(blank=True, help_text='Average conversion rate across all uses', null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sequence_templates', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Sequence Template',
                'verbose_name_plural': 'Sequence Templates',
                'db_table': 'sequence_templates',
                'ordering': ['-times_used', 'name'],
                'indexes': [models.Index(fields=['group', 'category'], name='sequence_te_group_i_fe48a1_idx'), models.Index(fields=['is_public', 'category'], name='sequence_te_is_publ_8f03a1_idx')],
            },
        ),
        migrations.CreateModel(
            name='SequenceStepExecution',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('executing', 'Executing'), ('completed', 'Completed'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='scheduled', max_length=20)),
                ('scheduled_at', models.DateTimeField()),
                ('executed_at', models.DateTimeField(blank=True, null=True)),
                ('result', models.JSONField(blank=True, default=dict, help_text='Execution results')),
                ('error_message', models.TextField(blank=True)),
                ('email_message_id', models.UUIDField(blank=True, help_text='ID of EmailMessage if email was sent', null=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_executions', to='contacts.sequenceenrollment')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='contacts.sequencestep')),
            ],
            options={
                'verbose_name': 'Step Execution',
                'verbose_name_plural': 'Step Executions',
                'db_table': 'sequence_step_executions',
                'ordering': ['enrollment', 'step__order'],
                'indexes': [models.Index(fields=['group', 'status', 'scheduled_at'], name='sequence_st_group_i_da9048_idx'), models.Index(fields=['enrollment', 'step'], name='sequence_st_enrollm_309a99_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='sequencestep',
            index=models.Index(fields=['group', 'sequence', 'order'], name='sequence_st_group_i_e22c60_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sequencestep',
            unique_together={('sequence', 'order')},
        ),
        migrations.AddIndex(
            model_name='sequenceenrollment',
            index=models.Index(fields=['group', 'status', 'next_step_at'], name='sequence_en_group_i_6219cc_idx'),
        ),
        migrations.AddIndex(
            model_name='sequenceenrollment',
            index=models.Index(fields=['group', 'sequence', 'status'], name='sequence_en_group_i_4f7809_idx'),
        ),
        migrations.AddIndex(
            model_name='sequenceenrollment',
            index=models.Index(fields=['group', 'contact', 'status'], name='sequence_en_group_i_e6ea25_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sequenceenrollment',
            unique_together={('sequence', 'contact')},
        ),
        migrations.AddIndex(
            model_name='outreachsequence',
            index=models.Index(fields=['group', 'status'], name='outreach_se_group_i_e5be36_idx'),
        ),
        migrations.AddIndex(
            model_name='outreachsequence',
            index=models.Index(fields=['group', 'trigger_type'], name='outreach_se_group_i_264fde_idx'),
        ),
    ]
