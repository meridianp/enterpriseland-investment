# Generated by Django 4.2.7 on 2025-06-24 18:58

import contacts.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('assessments', '0001_initial'),
        ('accounts', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Primary email address for the contact', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(blank=True, help_text='First name (for individual contacts)', max_length=100)),
                ('last_name', models.CharField(blank=True, help_text='Last name (for individual contacts)', max_length=100)),
                ('company_name', models.CharField(blank=True, help_text="Company name (for company contacts or individual's employer)", max_length=255)),
                ('contact_type', models.CharField(choices=[('individual', 'Individual Contact'), ('company', 'Company Contact')], default='individual', help_text='Type of contact (individual or company)', max_length=20)),
                ('status', django_fsm.FSMField(choices=[('lead', 'Lead'), ('qualified', 'Qualified Lead'), ('opportunity', 'Opportunity'), ('customer', 'Customer'), ('inactive', 'Inactive'), ('unsubscribed', 'Unsubscribed')], default='lead', help_text='Current status in the contact lifecycle', max_length=50)),
                ('phone_primary', models.CharField(blank=True, help_text='Primary phone number', max_length=20)),
                ('phone_secondary', models.CharField(blank=True, help_text='Secondary phone number', max_length=20)),
                ('website', models.URLField(blank=True, help_text='Website URL')),
                ('city', models.CharField(blank=True, help_text='City location', max_length=100)),
                ('country', models.CharField(blank=True, help_text='Country (ISO 3166-1 alpha-2 code)', max_length=2, validators=[contacts.models.validate_country_code])),
                ('job_title', models.CharField(blank=True, help_text='Job title or position', max_length=150)),
                ('department', models.CharField(blank=True, help_text='Department or division', max_length=100)),
                ('current_score', models.IntegerField(default=0, help_text='Current lead score (0-100, denormalized for performance)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('source', models.CharField(blank=True, help_text='Source of contact (referral, website, event, etc.)', max_length=100)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Flexible tagging system for categorization')),
                ('email_opt_in', models.BooleanField(default=True, help_text='Consent to receive marketing emails')),
                ('sms_opt_in', models.BooleanField(default=False, help_text='Consent to receive SMS messages')),
                ('last_activity_at', models.DateTimeField(blank=True, help_text='Timestamp of last recorded activity', null=True)),
                ('last_email_sent_at', models.DateTimeField(blank=True, help_text='Timestamp of last email sent to this contact', null=True)),
                ('last_email_opened_at', models.DateTimeField(blank=True, help_text='Timestamp of last email opened by this contact', null=True)),
                ('notes', models.TextField(blank=True, help_text='Private notes about the contact')),
                ('custom_fields', models.JSONField(blank=True, default=dict, help_text='Flexible custom fields for additional data')),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User responsible for this contact', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_contacts', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='ContactList',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the contact list', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the list purpose and criteria')),
                ('is_dynamic', models.BooleanField(default=False, help_text='Whether this is a dynamic list based on criteria')),
                ('filter_criteria', models.JSONField(blank=True, default=dict, help_text='Saved filter criteria for dynamic lists')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this list is visible to other users in the group')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for organizing lists')),
                ('contacts', models.ManyToManyField(blank=True, help_text='Contacts in this list (for static lists)', related_name='contact_lists', to='contacts.contact')),
                ('created_by', models.ForeignKey(help_text='User who created this list', on_delete=django.db.models.deletion.PROTECT, related_name='created_contact_lists', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Contact List',
                'verbose_name_plural': 'Contact Lists',
                'db_table': 'contact_lists',
            },
        ),
        migrations.CreateModel(
            name='ContactActivity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('email_sent', 'Email Sent'), ('email_received', 'Email Received'), ('email_opened', 'Email Opened'), ('email_clicked', 'Email Link Clicked'), ('call_made', 'Call Made'), ('call_received', 'Call Received'), ('meeting_scheduled', 'Meeting Scheduled'), ('meeting_completed', 'Meeting Completed'), ('note_added', 'Note Added'), ('document_shared', 'Document Shared'), ('form_submitted', 'Form Submitted'), ('campaign_sent', 'Campaign Sent'), ('website_visit', 'Website Visit')], help_text='Type of activity performed', max_length=20)),
                ('subject', models.CharField(blank=True, help_text='Subject or title of the activity', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the activity')),
                ('object_id', models.UUIDField(blank=True, help_text='ID of the related object', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity metadata (email IDs, URLs, etc.)')),
                ('outcome', models.CharField(blank=True, help_text='Outcome or result of the activity', max_length=100)),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether this activity requires follow-up')),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='When follow-up is required', null=True)),
                ('actor', models.ForeignKey(blank=True, help_text='User who performed the activity', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_activities', to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(help_text='Contact this activity relates to', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='contacts.contact')),
                ('content_type', models.ForeignKey(blank=True, help_text='Type of the related object', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Contact Activity',
                'verbose_name_plural': 'Contact Activities',
                'db_table': 'contact_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactPartner',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relationship_type', models.CharField(choices=[('employee', 'Employee'), ('director', 'Director'), ('advisor', 'Advisor'), ('consultant', 'Consultant'), ('investor', 'Investor'), ('vendor', 'Vendor'), ('client', 'Client'), ('other', 'Other')], default='other', help_text='Type of relationship between contact and partner', max_length=20)),
                ('start_date', models.DateField(blank=True, help_text='Start date of the relationship', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the relationship (if applicable)', null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary contact for the partner')),
                ('notes', models.TextField(blank=True, help_text='Notes about this specific relationship')),
                ('contact', models.ForeignKey(help_text='Contact in the relationship', on_delete=django.db.models.deletion.CASCADE, related_name='partner_relationships', to='contacts.contact')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('partner', models.ForeignKey(help_text='Development partner in the relationship', on_delete=django.db.models.deletion.CASCADE, related_name='contact_relationships', to='assessments.developmentpartner')),
            ],
            options={
                'verbose_name': 'Contact-Partner Relationship',
                'verbose_name_plural': 'Contact-Partner Relationships',
                'db_table': 'contact_partners',
                'indexes': [models.Index(fields=['group', 'contact'], name='contact_par_group_i_57c6e7_idx'), models.Index(fields=['group', 'partner'], name='contact_par_group_i_9dd7e7_idx'), models.Index(fields=['group', 'relationship_type'], name='contact_par_group_i_59c6a6_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='contactpartner',
            constraint=models.UniqueConstraint(fields=('group', 'contact', 'partner'), name='unique_contact_partner_per_group'),
        ),
        migrations.AddIndex(
            model_name='contactlist',
            index=models.Index(fields=['group', 'created_by'], name='contact_lis_group_i_df99c2_idx'),
        ),
        migrations.AddIndex(
            model_name='contactlist',
            index=models.Index(fields=['group', 'is_dynamic'], name='contact_lis_group_i_823849_idx'),
        ),
        migrations.AddIndex(
            model_name='contactlist',
            index=models.Index(fields=['group', 'is_public'], name='contact_lis_group_i_17eda1_idx'),
        ),
        migrations.AddConstraint(
            model_name='contactlist',
            constraint=models.UniqueConstraint(fields=('group', 'name'), name='unique_contact_list_name_per_group'),
        ),
        migrations.AddIndex(
            model_name='contactactivity',
            index=models.Index(fields=['group', 'contact', '-created_at'], name='contact_act_group_i_972909_idx'),
        ),
        migrations.AddIndex(
            model_name='contactactivity',
            index=models.Index(fields=['group', 'activity_type', '-created_at'], name='contact_act_group_i_15f9bb_idx'),
        ),
        migrations.AddIndex(
            model_name='contactactivity',
            index=models.Index(fields=['group', 'actor', '-created_at'], name='contact_act_group_i_d49206_idx'),
        ),
        migrations.AddIndex(
            model_name='contactactivity',
            index=models.Index(fields=['group', 'follow_up_required', 'follow_up_date'], name='contact_act_group_i_d66cbe_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['group', 'email'], name='contacts_group_i_85c9e4_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['group', 'status'], name='contacts_group_i_6a8368_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['group', 'current_score'], name='contacts_group_i_949120_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['group', 'last_activity_at'], name='contacts_group_i_aae66e_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['group', 'assigned_to'], name='contacts_group_i_ddae6a_idx'),
        ),
        migrations.AddConstraint(
            model_name='contact',
            constraint=models.UniqueConstraint(fields=('group', 'email'), name='unique_contact_email_per_group'),
        ),
    ]
