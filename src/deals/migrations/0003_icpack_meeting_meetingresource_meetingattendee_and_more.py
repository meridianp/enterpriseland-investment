# Generated by Django 4.2.7 on 2025-06-28 01:58

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_initial'),
        ('files', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('deals', '0002_virtualdataroom_vdrfolder_vdrdocument_vdrauditlog_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ICPack',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='IC pack title', max_length=255)),
                ('meeting_date', models.DateTimeField(blank=True, help_text='Scheduled IC meeting date', null=True)),
                ('version', models.IntegerField(default=1, help_text='Pack version number', validators=[django.core.validators.MinValueValidator(1)])),
                ('status', django_fsm.FSMField(choices=[('draft', 'Draft'), ('ready_for_review', 'Ready for Review'), ('in_review', 'In Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('distributed', 'Distributed'), ('archived', 'Archived')], default='draft', max_length=50)),
                ('sections_data', models.JSONField(default=dict, help_text='Generated content for each section')),
                ('custom_content', models.JSONField(blank=True, default=dict, help_text='Additional custom content')),
                ('current_approval_stage', models.CharField(blank=True, help_text='Current stage in approval workflow', max_length=50)),
                ('approval_deadline', models.DateTimeField(blank=True, help_text='Deadline for approval', null=True)),
                ('distribution_list', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, help_text='Email addresses for distribution', size=None)),
                ('distributed_at', models.DateTimeField(blank=True, null=True)),
                ('generation_time_seconds', models.FloatField(blank=True, help_text='Time taken to generate the pack', null=True)),
                ('times_viewed', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_ic_packs', to=settings.AUTH_USER_MODEL)),
                ('deal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ic_packs', to='deals.deal')),
                ('generated_document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ic_pack_documents', to='files.fileattachment')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='modified_ic_packs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IC Pack',
                'verbose_name_plural': 'IC Packs',
                'db_table': 'ic_packs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Meeting title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Meeting description and agenda')),
                ('meeting_type', models.CharField(choices=[('initial_meeting', 'Initial Meeting'), ('due_diligence', 'Due Diligence Session'), ('investment_committee', 'Investment Committee'), ('board_meeting', 'Board Meeting'), ('investor_update', 'Investor Update'), ('quarterly_review', 'Quarterly Review'), ('partnership_meeting', 'Partnership Meeting'), ('follow_up', 'Follow-up Meeting'), ('closing_meeting', 'Closing Meeting'), ('other', 'Other')], default='other', help_text='Type of meeting', max_length=30)),
                ('start_time', models.DateTimeField(help_text='Meeting start time')),
                ('end_time', models.DateTimeField(help_text='Meeting end time')),
                ('timezone_name', models.CharField(default='UTC', help_text="Timezone for the meeting (e.g., 'America/New_York')", max_length=50)),
                ('location', models.CharField(blank=True, help_text='Physical meeting location', max_length=500)),
                ('virtual_meeting_url', models.URLField(blank=True, help_text='Virtual meeting URL (Zoom, Teams, etc.)')),
                ('meeting_room', models.CharField(blank=True, help_text='Conference room or meeting room', max_length=100)),
                ('status', django_fsm.FSMField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled'), ('no_show', 'No Show')], default='draft', help_text='Current meeting status', max_length=50)),
                ('recurrence_type', models.CharField(choices=[('none', 'None'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='none', help_text='Meeting recurrence pattern', max_length=20)),
                ('recurrence_interval', models.PositiveIntegerField(default=1, help_text='Recurrence interval (e.g., every 2 weeks)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('recurrence_end_date', models.DateTimeField(blank=True, help_text='When recurrence ends', null=True)),
                ('calendar_provider', models.CharField(choices=[('google', 'Google Calendar'), ('outlook', 'Microsoft Outlook'), ('apple', 'Apple Calendar'), ('calendly', 'Calendly'), ('zoom', 'Zoom'), ('teams', 'Microsoft Teams'), ('internal', 'Internal Calendar')], default='internal', help_text='Calendar provider for integration', max_length=20)),
                ('external_calendar_id', models.CharField(blank=True, help_text='External calendar event ID', max_length=255)),
                ('calendar_sync_enabled', models.BooleanField(default=True, help_text='Whether to sync with external calendar')),
                ('requires_confirmation', models.BooleanField(default=True, help_text='Whether attendees need to confirm attendance')),
                ('allow_guests', models.BooleanField(default=False, help_text='Whether attendees can invite guests')),
                ('send_reminders', models.BooleanField(default=True, help_text='Whether to send meeting reminders')),
                ('agenda', models.JSONField(blank=True, default=list, help_text='\n        Meeting agenda items:\n        [\n            {\n                "item": "Review Q3 results",\n                "duration_minutes": 15,\n                "presenter": "John Doe"\n            }\n        ]\n        ')),
                ('preparation_notes', models.TextField(blank=True, help_text='Notes for meeting preparation')),
                ('meeting_notes', models.TextField(blank=True, help_text='Meeting notes and minutes')),
                ('action_items', models.JSONField(blank=True, default=list, help_text='\n        Action items from the meeting:\n        [\n            {\n                "action": "Follow up on due diligence",\n                "assigned_to": "user_id",\n                "due_date": "2024-01-15"\n            }\n        ]\n        ')),
                ('next_steps', models.TextField(blank=True, help_text='Next steps identified in the meeting')),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='When the meeting actually started', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='When the meeting actually ended', null=True)),
                ('attendee_count', models.PositiveIntegerField(default=0, help_text='Number of attendees who joined')),
                ('deal', models.ForeignKey(blank=True, help_text='Associated deal (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='deals.deal')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('organizer', models.ForeignKey(help_text='Meeting organizer', on_delete=django.db.models.deletion.PROTECT, related_name='organized_meetings', to=settings.AUTH_USER_MODEL)),
                ('parent_meeting', models.ForeignKey(blank=True, help_text='Parent meeting for recurring instances', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances', to='deals.meeting')),
            ],
            options={
                'verbose_name': 'Meeting',
                'verbose_name_plural': 'Meetings',
                'db_table': 'meetings',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='MeetingResource',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Resource name', max_length=255)),
                ('resource_type', models.CharField(choices=[('conference_room', 'Conference Room'), ('equipment', 'Equipment'), ('catering', 'Catering'), ('transportation', 'Transportation'), ('accommodation', 'Accommodation'), ('other', 'Other')], default='other', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Resource description and capabilities')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum capacity (for rooms)', null=True)),
                ('location', models.CharField(blank=True, help_text='Resource location', max_length=255)),
                ('specifications', models.JSONField(blank=True, default=dict, help_text='Resource specifications and features')),
                ('is_active', models.BooleanField(default=True, help_text='Whether resource is available for booking')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether booking requires approval')),
                ('hourly_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per hour (if applicable)', max_digits=10, null=True)),
                ('setup_cost', models.DecimalField(blank=True, decimal_places=2, help_text='One-time setup cost', max_digits=10, null=True)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Meeting Resource',
                'verbose_name_plural': 'Meeting Resources',
                'db_table': 'meeting_resources',
                'ordering': ['resource_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MeetingAttendee',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Attendee email address', max_length=254)),
                ('name', models.CharField(help_text='Attendee full name', max_length=255)),
                ('organization', models.CharField(blank=True, help_text='Attendee organization', max_length=255)),
                ('attendee_type', models.CharField(choices=[('required', 'Required'), ('optional', 'Optional'), ('organizer', 'Organizer'), ('presenter', 'Presenter'), ('observer', 'Observer')], default='required', max_length=20)),
                ('can_edit_agenda', models.BooleanField(default=False, help_text='Whether attendee can edit meeting agenda')),
                ('can_invite_guests', models.BooleanField(default=False, help_text='Whether attendee can invite additional guests')),
                ('response_status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('tentative', 'Tentative'), ('no_response', 'No Response')], default='pending', max_length=20)),
                ('response_notes', models.TextField(blank=True, help_text='Notes provided with response')),
                ('responded_at', models.DateTimeField(blank=True, help_text='When attendee responded', null=True)),
                ('joined_at', models.DateTimeField(blank=True, help_text='When attendee joined the meeting', null=True)),
                ('left_at', models.DateTimeField(blank=True, help_text='When attendee left the meeting', null=True)),
                ('attended', models.BooleanField(default=False, help_text='Whether attendee actually attended')),
                ('send_invitations', models.BooleanField(default=True, help_text='Whether to send meeting invitations')),
                ('send_reminders', models.BooleanField(default=True, help_text='Whether to send meeting reminders')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendees', to='deals.meeting')),
                ('user', models.ForeignKey(blank=True, help_text='Internal user (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meeting_attendances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Meeting Attendee',
                'verbose_name_plural': 'Meeting Attendees',
                'db_table': 'meeting_attendees',
                'ordering': ['attendee_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ICPackTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Template name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Template description and use cases')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is available for use')),
                ('is_default', models.BooleanField(default=False, help_text='Default template for IC packs')),
                ('sections', models.JSONField(default=list, help_text='\n        List of sections with configuration:\n        [\n            {\n                "id": "executive_summary",\n                "title": "Executive Summary",\n                "order": 1,\n                "required": true,\n                "data_sources": ["deal", "partner", "assessment"],\n                "template": "sections/executive_summary.html",\n                "max_pages": 2\n            }\n        ]\n        ')),
                ('required_documents', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Document types required for this template', size=None)),
                ('approval_stages', models.JSONField(default=list, help_text='\n        Approval workflow stages:\n        [\n            {\n                "stage": "analyst_review",\n                "name": "Analyst Review",\n                "required_role": "ANALYST",\n                "order": 1\n            }\n        ]\n        ')),
                ('output_format', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'Word Document'), ('pptx', 'PowerPoint')], default='pdf', max_length=20)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_ic_templates', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'IC Pack Template',
                'verbose_name_plural': 'IC Pack Templates',
                'db_table': 'ic_pack_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ICPackDistribution',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recipient_email', models.EmailField(max_length=254)),
                ('recipient_name', models.CharField(blank=True, max_length=255)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('first_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('last_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.IntegerField(default=0)),
                ('download_count', models.IntegerField(default=0)),
                ('access_token', models.UUIDField(default=uuid.uuid4, help_text='Unique token for accessing the pack', unique=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Optional expiration for access', null=True)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('ic_pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributions', to='deals.icpack')),
                ('recipient_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_ic_packs', to=settings.AUTH_USER_MODEL)),
                ('sent_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='distributed_ic_packs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'IC Pack Distribution',
                'verbose_name_plural': 'IC Pack Distributions',
                'db_table': 'ic_pack_distributions',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ICPackAuditLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('created', 'Created'), ('modified', 'Modified'), ('submitted', 'Submitted for Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('distributed', 'Distributed'), ('viewed', 'Viewed'), ('downloaded', 'Downloaded'), ('archived', 'Archived'), ('version_created', 'New Version Created')], max_length=30)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the action')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional action metadata')),
                ('changes', models.JSONField(blank=True, default=dict, help_text='Field changes for modifications')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ic_pack_actions', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('ic_pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='deals.icpack')),
            ],
            options={
                'verbose_name': 'IC Pack Audit Log',
                'verbose_name_plural': 'IC Pack Audit Logs',
                'db_table': 'ic_pack_audit_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ICPackApproval',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stage', models.CharField(help_text='Approval stage identifier', max_length=50)),
                ('stage_name', models.CharField(help_text='Human-readable stage name', max_length=100)),
                ('decision', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('conditional', 'Conditionally Approved')], default='pending', max_length=20)),
                ('decided_at', models.DateTimeField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, help_text='Approval comments or feedback')),
                ('conditions', models.JSONField(blank=True, default=list, help_text='Conditions for approval if conditional')),
                ('delegated_at', models.DateTimeField(blank=True, null=True)),
                ('decided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ic_pack_decisions', to=settings.AUTH_USER_MODEL)),
                ('delegated_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delegated_ic_approvals', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('ic_pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='deals.icpack')),
            ],
            options={
                'verbose_name': 'IC Pack Approval',
                'verbose_name_plural': 'IC Pack Approvals',
                'db_table': 'ic_pack_approvals',
                'ordering': ['ic_pack', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='icpack',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='packs', to='deals.icpacktemplate'),
        ),
        migrations.CreateModel(
            name='AvailabilitySlot',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='Slot start time')),
                ('end_time', models.DateTimeField(help_text='Slot end time')),
                ('slot_type', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('out_of_office', 'Out of Office'), ('tentative', 'Tentative')], default='available', max_length=20)),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this is a recurring availability pattern')),
                ('recurrence_pattern', models.JSONField(blank=True, default=dict, help_text='Recurrence pattern configuration')),
                ('title', models.CharField(blank=True, help_text='Slot title or description', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about availability')),
                ('preferred_meeting_types', models.JSONField(blank=True, default=list, help_text='Preferred meeting types for this slot')),
                ('max_meetings_per_slot', models.PositiveIntegerField(default=1, help_text='Maximum meetings that can be scheduled in this slot')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Availability Slot',
                'verbose_name_plural': 'Availability Slots',
                'db_table': 'availability_slots',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='MeetingResourceBooking',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='Resource booking start time')),
                ('end_time', models.DateTimeField(help_text='Resource booking end time')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('in_use', 'In Use'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('setup_minutes', models.PositiveIntegerField(default=0, help_text='Setup time required before meeting')),
                ('breakdown_minutes', models.PositiveIntegerField(default=0, help_text='Breakdown time required after meeting')),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated booking cost', max_digits=10, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Actual booking cost', max_digits=10, null=True)),
                ('booking_notes', models.TextField(blank=True, help_text='Special requirements or notes')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_bookings', to='deals.meeting')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='deals.meetingresource')),
            ],
            options={
                'verbose_name': 'Meeting Resource Booking',
                'verbose_name_plural': 'Meeting Resource Bookings',
                'db_table': 'meeting_resource_bookings',
                'ordering': ['start_time'],
                'indexes': [models.Index(fields=['group', 'meeting'], name='meeting_res_group_i_5278bb_idx'), models.Index(fields=['group', 'resource'], name='meeting_res_group_i_267c98_idx'), models.Index(fields=['group', 'start_time'], name='meeting_res_group_i_34720c_idx'), models.Index(fields=['group', 'status'], name='meeting_res_group_i_412a08_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='meetingresource',
            index=models.Index(fields=['group', 'resource_type'], name='meeting_res_group_i_2ac5b6_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingresource',
            index=models.Index(fields=['group', 'is_active'], name='meeting_res_group_i_53f85b_idx'),
        ),
        migrations.AddConstraint(
            model_name='meetingresource',
            constraint=models.UniqueConstraint(fields=('group', 'name'), name='unique_resource_name_per_group'),
        ),
        migrations.AddIndex(
            model_name='meetingattendee',
            index=models.Index(fields=['group', 'meeting'], name='meeting_att_group_i_086544_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingattendee',
            index=models.Index(fields=['group', 'user'], name='meeting_att_group_i_96717f_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingattendee',
            index=models.Index(fields=['group', 'response_status'], name='meeting_att_group_i_52941f_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingattendee',
            index=models.Index(fields=['email'], name='meeting_att_email_1f75ee_idx'),
        ),
        migrations.AddConstraint(
            model_name='meetingattendee',
            constraint=models.UniqueConstraint(fields=('meeting', 'email'), name='unique_attendee_per_meeting'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['group', 'start_time'], name='meetings_group_i_56a057_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['group', 'deal'], name='meetings_group_i_96bf79_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['group', 'organizer'], name='meetings_group_i_9fb8e8_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['group', 'status'], name='meetings_group_i_f378fc_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['group', 'meeting_type'], name='meetings_group_i_4512c3_idx'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['external_calendar_id'], name='meetings_externa_ff8f82_idx'),
        ),
        migrations.AddIndex(
            model_name='icpacktemplate',
            index=models.Index(fields=['group', 'is_active'], name='ic_pack_tem_group_i_a51781_idx'),
        ),
        migrations.AddIndex(
            model_name='icpacktemplate',
            index=models.Index(fields=['group', 'is_default'], name='ic_pack_tem_group_i_3bd127_idx'),
        ),
        migrations.AddConstraint(
            model_name='icpacktemplate',
            constraint=models.UniqueConstraint(fields=('group', 'name'), name='unique_ic_template_name_per_group'),
        ),
        migrations.AddConstraint(
            model_name='icpacktemplate',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('group', 'is_default'), name='unique_default_ic_template_per_group'),
        ),
        migrations.AddIndex(
            model_name='icpackdistribution',
            index=models.Index(fields=['group', 'ic_pack'], name='ic_pack_dis_group_i_55637c_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackdistribution',
            index=models.Index(fields=['access_token'], name='ic_pack_dis_access__c368e4_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackdistribution',
            index=models.Index(fields=['recipient_email'], name='ic_pack_dis_recipie_848428_idx'),
        ),
        migrations.AddConstraint(
            model_name='icpackdistribution',
            constraint=models.UniqueConstraint(fields=('ic_pack', 'recipient_email'), name='unique_distribution_per_recipient'),
        ),
        migrations.AddIndex(
            model_name='icpackauditlog',
            index=models.Index(fields=['group', 'ic_pack', '-created_at'], name='ic_pack_aud_group_i_3418db_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackauditlog',
            index=models.Index(fields=['group', 'action', '-created_at'], name='ic_pack_aud_group_i_613316_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackauditlog',
            index=models.Index(fields=['group', 'actor', '-created_at'], name='ic_pack_aud_group_i_38e0fb_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackapproval',
            index=models.Index(fields=['group', 'ic_pack'], name='ic_pack_app_group_i_5248da_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackapproval',
            index=models.Index(fields=['group', 'decision'], name='ic_pack_app_group_i_2bdcfd_idx'),
        ),
        migrations.AddIndex(
            model_name='icpackapproval',
            index=models.Index(fields=['group', 'decided_by'], name='ic_pack_app_group_i_ebcba6_idx'),
        ),
        migrations.AddConstraint(
            model_name='icpackapproval',
            constraint=models.UniqueConstraint(fields=('ic_pack', 'stage'), name='unique_approval_per_stage'),
        ),
        migrations.AddIndex(
            model_name='icpack',
            index=models.Index(fields=['group', 'deal'], name='ic_packs_group_i_14be2b_idx'),
        ),
        migrations.AddIndex(
            model_name='icpack',
            index=models.Index(fields=['group', 'status'], name='ic_packs_group_i_2cbae3_idx'),
        ),
        migrations.AddIndex(
            model_name='icpack',
            index=models.Index(fields=['group', 'meeting_date'], name='ic_packs_group_i_4aeea9_idx'),
        ),
        migrations.AddIndex(
            model_name='icpack',
            index=models.Index(fields=['group', 'created_by'], name='ic_packs_group_i_3168e8_idx'),
        ),
        migrations.AddConstraint(
            model_name='icpack',
            constraint=models.UniqueConstraint(fields=('deal', 'version'), name='unique_ic_pack_version_per_deal'),
        ),
        migrations.AddIndex(
            model_name='availabilityslot',
            index=models.Index(fields=['group', 'user'], name='availabilit_group_i_dd225c_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityslot',
            index=models.Index(fields=['group', 'start_time'], name='availabilit_group_i_48822d_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityslot',
            index=models.Index(fields=['group', 'slot_type'], name='availabilit_group_i_c893b4_idx'),
        ),
    ]
