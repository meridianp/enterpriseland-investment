name: Investment Module CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Investment Module
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run module tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key
        PLATFORM_CORE_URL: http://localhost:8000
        DJANGO_SETTINGS_MODULE: settings
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html
    
    - name: Test module integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test-secret-key
      run: |
        python -m pytest tests/integration/ -m integration
      continue-on-error: true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: investment-module
        name: investment-module-coverage

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run Black
      run: black --check src/ tests/
    
    - name: Run isort
      run: isort --check-only src/ tests/
    
    - name: Run Flake8
      run: flake8 src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json

  validate-module:
    name: Validate Module Interface
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Validate module.json
      run: |
        python -c "
        import json
        import sys
        
        with open('module.json', 'r') as f:
            manifest = json.load(f)
        
        required_fields = ['id', 'name', 'version', 'description', 'permissions']
        missing = [field for field in required_fields if field not in manifest]
        
        if missing:
            print(f'Missing required fields: {missing}')
            sys.exit(1)
        
        print('Module manifest is valid')
        "
    
    - name: Check module structure
      run: |
        # Check required directories exist
        for dir in src tests docs; do
          if [ ! -d "$dir" ]; then
            echo "Missing required directory: $dir"
            exit 1
          fi
        done
        
        # Check module.py exists
        if [ ! -f "module.py" ]; then
          echo "Missing module.py entry point"
          exit 1
        fi
        
        echo "Module structure is valid"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, security, validate-module]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: investment-module:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max