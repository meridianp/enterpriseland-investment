# Generated by Django 4.2.7 on 2025-06-26 19:10

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assessments', '0001_initial'),
        ('accounts', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='QueryTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Human-readable name for the query template', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of what this template searches for')),
                ('template_type', models.CharField(choices=[('company_discovery', 'Company Discovery'), ('funding_announcement', 'Funding Announcement'), ('development_news', 'Development News'), ('partnership_news', 'Partnership News'), ('acquisition_news', 'Acquisition News')], default='company_discovery', max_length=30)),
                ('query_pattern', models.TextField(help_text='Search query pattern with placeholders')),
                ('keywords', models.JSONField(default=list, help_text='List of keywords to include in searches')),
                ('excluded_keywords', models.JSONField(default=list, help_text='List of keywords to exclude from searches')),
                ('regions', models.JSONField(default=list, help_text='Geographic regions to focus search on')),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, default=list, help_text="Language codes for search (e.g., ['en', 'es'])", size=None)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is actively used')),
                ('schedule_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', max_length=20)),
                ('last_executed', models.DateTimeField(blank=True, help_text='When this template was last executed', null=True)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'db_table': 'market_intelligence_query_templates',
            },
        ),
        migrations.CreateModel(
            name='NewsArticle',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Article headline', max_length=500)),
                ('content', models.TextField(help_text='Full article content')),
                ('summary', models.TextField(blank=True, help_text='AI-generated summary of article')),
                ('url', models.URLField(help_text='Source URL of the article', unique=True)),
                ('published_date', models.DateTimeField(help_text='When the article was originally published')),
                ('scraped_date', models.DateTimeField(auto_now_add=True, help_text='When the article was scraped')),
                ('source', models.CharField(help_text="Publication source (e.g., 'TechCrunch', 'Reuters')", max_length=200)),
                ('author', models.CharField(blank=True, help_text='Article author if available', max_length=200)),
                ('language', models.CharField(default='en', help_text='Article language code', max_length=10)),
                ('content_hash', models.CharField(help_text='SHA-256 hash for deduplication', max_length=64, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Analysis'), ('analyzed', 'Analyzed'), ('relevant', 'Relevant'), ('irrelevant', 'Irrelevant'), ('archived', 'Archived')], default='pending', max_length=20)),
                ('relevance_score', models.FloatField(default=0.0, help_text='AI-calculated relevance score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sentiment_score', models.FloatField(blank=True, help_text='Sentiment analysis score (-1 to 1)', null=True, validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('entities_extracted', models.JSONField(default=dict, help_text='Extracted entities (companies, people, locations, etc.)')),
                ('topics', models.JSONField(default=list, help_text='Identified topics/themes in the article')),
                ('search_keywords', models.JSONField(default=list, help_text='Keywords that matched this article')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('query_template', models.ForeignKey(blank=True, help_text='Template used to find this article', null=True, on_delete=django.db.models.deletion.SET_NULL, to='market_intelligence.querytemplate')),
            ],
            options={
                'db_table': 'market_intelligence_news_articles',
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='TargetCompany',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(help_text='Official company name', max_length=255)),
                ('trading_name', models.CharField(blank=True, help_text='Trading or brand name if different', max_length=255)),
                ('domain', models.URLField(blank=True, help_text='Company website domain')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn company page URL')),
                ('description', models.TextField(blank=True, help_text='Company description/business model')),
                ('headquarters_city', models.CharField(blank=True, max_length=100)),
                ('headquarters_country', models.CharField(blank=True, help_text='ISO 3166-1 alpha-2 country code', max_length=2)),
                ('company_size', models.CharField(choices=[('startup', 'Startup (<50 employees)'), ('small', 'Small (50-200 employees)'), ('medium', 'Medium (200-1000 employees)'), ('large', 'Large (1000+ employees)'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('employee_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('business_model', models.CharField(choices=[('developer', 'Property Developer'), ('investor', 'Real Estate Investor'), ('operator', 'Property Operator'), ('platform', 'PropTech Platform'), ('service', 'Real Estate Services'), ('other', 'Other')], default='other', max_length=50)),
                ('focus_sectors', models.JSONField(default=list, help_text="List of real estate sectors (e.g., ['pbsa', 'office', 'retail'])")),
                ('geographic_focus', models.JSONField(default=list, help_text='Geographic markets of operation')),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('researching', 'Under Research'), ('qualified', 'Qualified Lead'), ('contacted', 'Initial Contact Made'), ('engaged', 'Actively Engaged'), ('converted', 'Converted to Partner'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='identified', max_length=20)),
                ('lead_score', models.FloatField(default=0.0, help_text='Calculated lead score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('qualification_notes', models.TextField(blank=True, help_text='Notes on lead qualification and research')),
                ('converted_at', models.DateTimeField(blank=True, help_text='When target was converted to partner', null=True)),
                ('enrichment_data', models.JSONField(default=dict, help_text='Data from LinkedIn, Clearbit, etc.')),
                ('last_enriched', models.DateTimeField(blank=True, help_text='When enrichment data was last updated', null=True)),
                ('assigned_analyst', models.ForeignKey(blank=True, help_text='Analyst assigned to research this target', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_targets', to=settings.AUTH_USER_MODEL)),
                ('development_partner', models.OneToOneField(blank=True, help_text='Development partner record if converted', null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessments.developmentpartner')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('identified_by', models.ForeignKey(blank=True, help_text='User who identified this target', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('source_articles', models.ManyToManyField(blank=True, help_text='Articles that mentioned this company', to='market_intelligence.newsarticle')),
            ],
            options={
                'db_table': 'market_intelligence_target_companies',
                'ordering': ['-lead_score', '-created_at'],
                'indexes': [models.Index(fields=['status', 'lead_score'], name='market_inte_status_1ec875_idx'), models.Index(fields=['business_model', 'status'], name='market_inte_busines_dbcde1_idx'), models.Index(fields=['assigned_analyst', 'status'], name='market_inte_assigne_c2f83b_idx'), models.Index(fields=['headquarters_country', 'status'], name='market_inte_headqua_8758fb_idx')],
                'unique_together': {('group', 'company_name')},
            },
        ),
        migrations.AddIndex(
            model_name='querytemplate',
            index=models.Index(fields=['template_type', 'is_active'], name='market_inte_templat_481a41_idx'),
        ),
        migrations.AddIndex(
            model_name='querytemplate',
            index=models.Index(fields=['schedule_frequency', 'last_executed'], name='market_inte_schedul_f5c467_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='querytemplate',
            unique_together={('group', 'name')},
        ),
        migrations.AddIndex(
            model_name='newsarticle',
            index=models.Index(fields=['status', 'relevance_score'], name='market_inte_status_d53386_idx'),
        ),
        migrations.AddIndex(
            model_name='newsarticle',
            index=models.Index(fields=['published_date', 'source'], name='market_inte_publish_d3d17e_idx'),
        ),
        migrations.AddIndex(
            model_name='newsarticle',
            index=models.Index(fields=['language', 'status'], name='market_inte_languag_af097d_idx'),
        ),
        migrations.AddIndex(
            model_name='newsarticle',
            index=models.Index(fields=['query_template', 'scraped_date'], name='market_inte_query_t_fb0be8_idx'),
        ),
    ]
