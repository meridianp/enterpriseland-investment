# Generated by Django 4.2.7 on 2025-06-26 19:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_initial'),
        ('assessments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('market_intelligence', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(help_text='Name of the target company', max_length=255)),
                ('trading_name', models.CharField(blank=True, help_text='Trading or brand name if different from company name', max_length=255)),
                ('primary_contact_name', models.CharField(blank=True, help_text='Name of primary contact person', max_length=255)),
                ('primary_contact_email', models.EmailField(blank=True, help_text='Email of primary contact', max_length=254)),
                ('primary_contact_phone', models.CharField(blank=True, help_text='Phone number of primary contact', max_length=50)),
                ('primary_contact_title', models.CharField(blank=True, help_text='Job title of primary contact', max_length=255)),
                ('domain', models.URLField(blank=True, help_text='Company website URL')),
                ('linkedin_url', models.URLField(blank=True, help_text='Company LinkedIn profile')),
                ('headquarters_city', models.CharField(blank=True, help_text='City where company is headquartered', max_length=255)),
                ('headquarters_country', models.CharField(blank=True, help_text='Country where company is headquartered', max_length=100)),
                ('status', models.CharField(choices=[('new', 'New'), ('qualified', 'Qualified'), ('contacted', 'Contacted'), ('meeting_scheduled', 'Meeting Scheduled'), ('proposal_sent', 'Proposal Sent'), ('negotiating', 'Negotiating'), ('converted', 'Converted'), ('lost', 'Lost'), ('nurturing', 'Nurturing'), ('rejected', 'Rejected')], default='new', help_text='Current status in the lead lifecycle', max_length=50)),
                ('source', models.CharField(choices=[('market_intelligence', 'Market Intelligence'), ('referral', 'Referral'), ('direct_inquiry', 'Direct Inquiry'), ('conference', 'Conference'), ('cold_outreach', 'Cold Outreach'), ('website', 'Website'), ('partner_network', 'Partner Network'), ('other', 'Other')], default='market_intelligence', help_text='How this lead was identified', max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level for follow-up', max_length=50)),
                ('current_score', models.FloatField(default=0.0, help_text='Current lead score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('last_scored_at', models.DateTimeField(blank=True, help_text='When the lead was last scored', null=True)),
                ('qualification_notes', models.TextField(blank=True, help_text='Notes about lead qualification')),
                ('converted_at', models.DateTimeField(blank=True, help_text='When the lead was converted to a partner', null=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for categorizing and filtering leads')),
                ('custom_fields', models.JSONField(default=dict, help_text='Custom fields for additional lead data')),
                ('estimated_deal_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated value of potential partnership', max_digits=15, null=True)),
                ('estimated_timeline_months', models.IntegerField(blank=True, help_text='Estimated months to conversion', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User responsible for this lead', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_leads', to=settings.AUTH_USER_MODEL)),
                ('converted_to_partner', models.ForeignKey(blank=True, help_text='Development partner created from this lead', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_leads', to='assessments.developmentpartner')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('identified_by', models.ForeignKey(blank=True, help_text='User who identified this lead', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='identified_leads', to=settings.AUTH_USER_MODEL)),
                ('market_intelligence_target', models.ForeignKey(blank=True, help_text='Associated market intelligence target', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='leads', to='market_intelligence.targetcompany')),
            ],
            options={
                'db_table': 'leads_lead',
                'ordering': ['-current_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadScoringModel',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the scoring model', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of scoring methodology and use case')),
                ('scoring_method', models.CharField(choices=[('weighted_average', 'Weighted Average'), ('neural_network', 'Neural Network'), ('ensemble', 'Ensemble Method'), ('custom', 'Custom Algorithm')], default='weighted_average', help_text='Primary scoring methodology', max_length=50)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived'), ('testing', 'Testing')], default='draft', help_text='Current status of the scoring model', max_length=50)),
                ('component_weights', models.JSONField(default=dict, help_text='Component weights for scoring calculation')),
                ('qualification_threshold', models.FloatField(default=70.0, help_text='Minimum score for lead qualification', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('high_priority_threshold', models.FloatField(default=85.0, help_text='Score threshold for high priority leads', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('auto_convert_threshold', models.FloatField(default=95.0, help_text='Score threshold for automatic conversion', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('accuracy_score', models.FloatField(blank=True, help_text='Model accuracy based on historical performance', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision_score', models.FloatField(blank=True, help_text='Model precision for qualified leads', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall_score', models.FloatField(blank=True, help_text='Model recall for qualified leads', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('version', models.CharField(default='1.0.0', help_text='Model version for tracking changes', max_length=20)),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default scoring model')),
                ('activated_at', models.DateTimeField(blank=True, help_text='When the model was activated', null=True)),
                ('deactivated_at', models.DateTimeField(blank=True, help_text='When the model was deactivated', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this scoring model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scoring_models', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'db_table': 'leads_scoring_model',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadActivity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('note', 'Note'), ('email_sent', 'Email Sent'), ('email_received', 'Email Received'), ('phone_call', 'Phone Call'), ('meeting', 'Meeting'), ('proposal_sent', 'Proposal Sent'), ('contract_sent', 'Contract Sent'), ('follow_up', 'Follow-up'), ('status_change', 'Status Change'), ('score_update', 'Score Update'), ('document_shared', 'Document Shared'), ('task_completed', 'Task Completed'), ('system_update', 'System Update')], help_text='Type of activity', max_length=50)),
                ('title', models.CharField(help_text='Brief title of the activity', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the activity')),
                ('activity_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the activity occurred')),
                ('outcome', models.CharField(blank=True, help_text='Outcome or result of the activity', max_length=255)),
                ('next_action', models.CharField(blank=True, help_text='Recommended next action', max_length=255)),
                ('next_action_date', models.DateTimeField(blank=True, help_text='When next action should be taken', null=True)),
                ('email_message_id', models.CharField(blank=True, help_text='Email message ID for email activities', max_length=255)),
                ('document_ids', models.JSONField(default=list, help_text='IDs of documents associated with this activity')),
                ('external_reference', models.CharField(blank=True, help_text='External system reference ID', max_length=255)),
                ('activity_data', models.JSONField(default=dict, help_text='Additional structured data for the activity')),
                ('is_milestone', models.BooleanField(default=False, help_text='Whether this activity represents a milestone')),
                ('is_automated', models.BooleanField(default=False, help_text='Whether this activity was automated')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('lead', models.ForeignKey(help_text='Lead this activity is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='leads.lead')),
                ('performed_by', models.ForeignKey(blank=True, help_text='User who performed this activity', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lead_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Lead Activities',
                'db_table': 'leads_activity',
                'ordering': ['-activity_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='lead',
            name='scoring_model',
            field=models.ForeignKey(blank=True, help_text='Scoring model used for this lead', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scored_leads', to='leads.leadscoringmodel'),
        ),
        migrations.AddIndex(
            model_name='leadscoringmodel',
            index=models.Index(fields=['group', 'status', 'is_default'], name='leads_scori_group_i_fc19bf_idx'),
        ),
        migrations.AddIndex(
            model_name='leadscoringmodel',
            index=models.Index(fields=['scoring_method', 'status'], name='leads_scori_scoring_b2434d_idx'),
        ),
        migrations.AddIndex(
            model_name='leadscoringmodel',
            index=models.Index(fields=['qualification_threshold', 'is_default'], name='leads_scori_qualifi_4de6d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leadscoringmodel',
            unique_together={('group', 'name', 'version')},
        ),
        migrations.AddIndex(
            model_name='leadactivity',
            index=models.Index(fields=['lead', 'activity_type', 'activity_date'], name='leads_activ_lead_id_e8bb47_idx'),
        ),
        migrations.AddIndex(
            model_name='leadactivity',
            index=models.Index(fields=['performed_by', 'activity_date'], name='leads_activ_perform_fe101f_idx'),
        ),
        migrations.AddIndex(
            model_name='leadactivity',
            index=models.Index(fields=['activity_type', 'is_milestone'], name='leads_activ_activit_e7a0d1_idx'),
        ),
        migrations.AddIndex(
            model_name='leadactivity',
            index=models.Index(fields=['next_action_date', 'lead'], name='leads_activ_next_ac_902c58_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['group', 'status', 'priority'], name='leads_lead_group_i_f4c9f5_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['assigned_to', 'status'], name='leads_lead_assigne_92225c_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['source', 'created_at'], name='leads_lead_source_ebb051_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['current_score', 'status'], name='leads_lead_current_2dbba5_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['last_scored_at', 'scoring_model'], name='leads_lead_last_sc_cc32ed_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lead',
            unique_together={('group', 'company_name')},
        ),
    ]
