# Generated by Django 4.2.7 on 2025-06-27 03:13

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NeighborhoodMetrics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('accessibility_score', models.FloatField(help_text='Score for transport accessibility (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('university_proximity_score', models.FloatField(help_text='Score for proximity to universities (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('amenities_score', models.FloatField(help_text='Score for student amenities availability (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('affordability_score', models.FloatField(help_text='Score for housing affordability (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('safety_score', models.FloatField(help_text='Score for neighborhood safety (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cultural_score', models.FloatField(help_text='Score for cultural and leisure options (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('planning_feasibility_score', models.FloatField(help_text='Score for development feasibility (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('competition_score', models.FloatField(default=50.0, help_text='Score based on competitive landscape (0-100, higher = less competition)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_score', models.FloatField(help_text='Weighted overall investment score (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('score_weights', models.JSONField(default=dict, help_text='Weights used for overall score calculation')),
                ('average_rent_psf', models.DecimalField(blank=True, decimal_places=2, help_text='Average rent per square foot in the area', max_digits=10, null=True)),
                ('transport_links_count', models.PositiveIntegerField(default=0, help_text='Number of public transport links')),
                ('amenities_count', models.PositiveIntegerField(default=0, help_text='Number of relevant amenities')),
                ('crime_rate_percentile', models.FloatField(blank=True, help_text='Crime rate percentile (0=lowest, 100=highest crime)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('calculation_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When these metrics were calculated')),
                ('data_sources', models.JSONField(default=list, help_text='List of data sources used')),
            ],
            options={
                'db_table': 'geographic_intelligence_neighborhood_metrics',
                'ordering': ['-overall_score'],
            },
        ),
        migrations.CreateModel(
            name='PointOfInterest',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the point of interest', max_length=255)),
                ('address', models.TextField(help_text='Physical address of the location')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='Geographic coordinates of the POI', srid=4326)),
                ('poi_type', models.CharField(choices=[('university', 'University/College'), ('dormitory', 'Existing Student Accommodation'), ('transport', 'Transport Hub'), ('metro', 'Metro/Subway Station'), ('bus', 'Bus Stop'), ('train', 'Train Station'), ('shopping', 'Shopping Center'), ('grocery', 'Grocery Store'), ('restaurant', 'Restaurant/Cafe'), ('nightlife', 'Nightlife Venue'), ('library', 'Library'), ('sports', 'Sports Facility'), ('healthcare', 'Healthcare Facility'), ('park', 'Park/Recreation')], db_index=True, help_text='Type of point of interest', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Brief description of the POI')),
                ('website', models.URLField(blank=True, help_text='Official website URL if available')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Capacity if applicable (e.g., dormitory beds, university enrollment)', null=True)),
                ('operating_hours', models.JSONField(blank=True, default=dict, help_text='Operating hours by day of week')),
                ('accessibility_features', models.JSONField(blank=True, default=list, help_text='List of accessibility features')),
                ('verified', models.BooleanField(default=False, help_text='Whether this POI has been verified')),
                ('data_source', models.CharField(blank=True, help_text='Source of the POI data', max_length=100)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'verbose_name': 'Point of Interest',
                'verbose_name_plural': 'Points of Interest',
                'db_table': 'geographic_intelligence_pois',
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the university', max_length=255)),
                ('university_type', models.CharField(choices=[('public', 'Public University'), ('private', 'Private University'), ('technical', 'Technical/Vocational'), ('community', 'Community College'), ('international', 'International Branch')], default='public', help_text='Type of university', max_length=20)),
                ('total_students', models.PositiveIntegerField(help_text='Total student enrollment')),
                ('international_students', models.PositiveIntegerField(blank=True, help_text='Number of international students', null=True)),
                ('postgraduate_students', models.PositiveIntegerField(blank=True, help_text='Number of postgraduate students', null=True)),
                ('campus_boundaries', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='Geographic boundaries of all campuses', null=True, srid=4326)),
                ('programs', models.JSONField(blank=True, default=list, help_text='List of notable programs/faculties')),
                ('ranking_national', models.PositiveIntegerField(blank=True, help_text='National ranking position', null=True)),
                ('ranking_global', models.PositiveIntegerField(blank=True, help_text='Global ranking position (e.g., QS, Times)', null=True)),
                ('expansion_plans', models.TextField(blank=True, help_text='Description of known expansion plans')),
                ('student_growth_rate', models.FloatField(blank=True, help_text='Annual student population growth rate (%)', null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('website', models.URLField(help_text='Official university website')),
                ('accommodation_office_url', models.URLField(blank=True, help_text='Student accommodation office URL')),
                ('on_campus_beds', models.PositiveIntegerField(default=0, help_text='Number of on-campus accommodation beds')),
                ('accommodation_guarantee', models.BooleanField(default=False, help_text='Whether university guarantees accommodation for first-years')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('main_campus', models.OneToOneField(help_text='Main campus location', on_delete=django.db.models.deletion.PROTECT, related_name='main_university', to='geographic_intelligence.pointofinterest')),
            ],
            options={
                'verbose_name_plural': 'Universities',
                'db_table': 'geographic_intelligence_universities',
            },
        ),
        migrations.CreateModel(
            name='PBSAMarketAnalysis',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('city', models.CharField(help_text='Target city name', max_length=100)),
                ('country', models.CharField(help_text='Country code (ISO 3166-1 alpha-2)', max_length=2)),
                ('analysis_date', models.DateField(default=django.utils.timezone.now, help_text='Date when the analysis was generated')),
                ('total_student_population', models.PositiveIntegerField(help_text='Total student population in the city')),
                ('international_student_percentage', models.FloatField(help_text='Percentage of international students', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('existing_pbsa_beds', models.PositiveIntegerField(default=0, help_text='Total existing PBSA beds in the market')),
                ('pipeline_beds', models.PositiveIntegerField(default=0, help_text='PBSA beds in development pipeline')),
                ('estimated_demand', models.PositiveIntegerField(help_text='Estimated total bed demand')),
                ('supply_demand_ratio', models.FloatField(help_text='Ratio of supply to demand (1.0 = balanced)')),
                ('average_occupancy_rate', models.FloatField(blank=True, help_text='Average occupancy rate across PBSA (%)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_rent_per_week', models.DecimalField(decimal_places=2, help_text='Average rent per bed per week', max_digits=10)),
                ('rent_growth_rate', models.FloatField(blank=True, help_text='Annual rent growth rate (%)', null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('market_summary', models.TextField(help_text='Executive summary of the market')),
                ('key_trends', models.JSONField(default=list, help_text='List of key market trends')),
                ('opportunities', models.JSONField(default=list, help_text='List of investment opportunities')),
                ('risks', models.JSONField(default=list, help_text='List of market risks')),
                ('top_neighborhoods', models.JSONField(default=list, help_text='Ranked list of top neighborhoods for investment')),
                ('neighborhood_count', models.PositiveIntegerField(default=0, help_text='Number of neighborhoods analyzed')),
                ('methodology', models.TextField(help_text='Description of research methodology')),
                ('data_sources', models.JSONField(default=list, help_text='List of data sources and references')),
                ('version', models.CharField(default='1.0', help_text='Version of the analysis', max_length=10)),
                ('is_published', models.BooleanField(default=False, help_text='Whether this analysis is published')),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
            ],
            options={
                'db_table': 'geographic_intelligence_market_analyses',
                'ordering': ['-analysis_date', '-version'],
            },
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the neighborhood', max_length=255)),
                ('description', models.TextField(help_text='Brief description of the neighborhood')),
                ('boundaries', django.contrib.gis.db.models.fields.PolygonField(help_text='Geographic boundaries of the neighborhood', srid=4326)),
                ('area_sqkm', models.FloatField(blank=True, help_text='Area in square kilometers', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('historic_district', models.BooleanField(default=False, help_text='Whether the neighborhood is designated as a historic district')),
                ('planning_constraints', models.JSONField(blank=True, default=list, help_text='List of planning constraints if any')),
                ('zoning_classification', models.CharField(blank=True, help_text='Zoning classification code', max_length=50)),
                ('max_building_height_m', models.FloatField(blank=True, help_text='Maximum allowed building height in meters', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('investment_rationale', models.TextField(help_text='Rationale for investment potential')),
                ('development_opportunities', models.PositiveIntegerField(default=0, help_text='Number of identified development opportunities')),
                ('average_land_price_psf', models.DecimalField(blank=True, decimal_places=2, help_text='Average land price per square foot', max_digits=10, null=True)),
                ('group', models.ForeignKey(help_text='Group this record belongs to for multi-tenant access control', on_delete=django.db.models.deletion.CASCADE, to='accounts.group')),
                ('metrics', models.OneToOneField(help_text='Evaluation metrics for the neighborhood', on_delete=django.db.models.deletion.CASCADE, related_name='neighborhood', to='geographic_intelligence.neighborhoodmetrics')),
                ('primary_university', models.ForeignKey(blank=True, help_text='Primary university serving this neighborhood', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_neighborhoods', to='geographic_intelligence.university')),
            ],
            options={
                'db_table': 'geographic_intelligence_neighborhoods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MarketAnalysisUniversity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='universities', to='geographic_intelligence.pbsamarketanalysis')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_analyses', to='geographic_intelligence.university')),
            ],
            options={
                'db_table': 'geographic_intelligence_market_universities',
            },
        ),
        migrations.CreateModel(
            name='MarketAnalysisNeighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(blank=True, help_text='Rank within this market analysis', null=True)),
                ('market_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='neighborhoods', to='geographic_intelligence.pbsamarketanalysis')),
                ('neighborhood', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='market_analyses', to='geographic_intelligence.neighborhood')),
            ],
            options={
                'db_table': 'geographic_intelligence_market_neighborhoods',
                'ordering': ['rank'],
            },
        ),
        migrations.CreateModel(
            name='UniversityCampus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(default=False, help_text='Whether this is the main campus')),
                ('student_count', models.PositiveIntegerField(blank=True, help_text='Number of students at this campus', null=True)),
                ('campus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='universities', to='geographic_intelligence.pointofinterest')),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campuses', to='geographic_intelligence.university')),
            ],
            options={
                'db_table': 'geographic_intelligence_university_campuses',
                'unique_together': {('university', 'campus')},
            },
        ),
        migrations.AddIndex(
            model_name='university',
            index=models.Index(fields=['university_type', 'total_students'], name='geographic__univers_74bbb8_idx'),
        ),
        migrations.AddIndex(
            model_name='university',
            index=models.Index(fields=['ranking_national'], name='geographic__ranking_dff8e7_idx'),
        ),
        migrations.AddIndex(
            model_name='pointofinterest',
            index=models.Index(fields=['poi_type', 'verified'], name='geographic__poi_typ_89d1ca_idx'),
        ),
        migrations.AddIndex(
            model_name='pbsamarketanalysis',
            index=models.Index(fields=['city', 'country', 'is_published'], name='geographic__city_575576_idx'),
        ),
        migrations.AddIndex(
            model_name='pbsamarketanalysis',
            index=models.Index(fields=['analysis_date'], name='geographic__analysi_9905c1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pbsamarketanalysis',
            unique_together={('group', 'city', 'country', 'version')},
        ),
        migrations.AddIndex(
            model_name='neighborhood',
            index=models.Index(fields=['name'], name='geographic__name_d9b733_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='marketanalysisuniversity',
            unique_together={('market_analysis', 'university')},
        ),
        migrations.AlterUniqueTogether(
            name='marketanalysisneighborhood',
            unique_together={('market_analysis', 'neighborhood')},
        ),
    ]
